package ${package}.${moduleName}.controller;


import lombok.extern.slf4j.Slf4j;
import java.util.Arrays;
import java.util.Map;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import lombok.extern.slf4j.Slf4j;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.R;
import ${mainPath}.common.exception.ParamException;


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Slf4j
@Api(value = "${comments}", tags = "${comments}")
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller{

    @Autowired
    private ${className}Service ${classname}Service;

    @GetMapping("/list")
    @ApiOperation(value="", httpMethod="GET", produces=MediaType.APPLICATION_JSON_VALUE,response = ${className}Entity.class)
    @ApiImplicitParams({
    #foreach ($column in $columns)
        @ApiImplicitParam(name = "$column.attrname", dataType = "$column.attrType", value = "$column.comments", required = false, paramType = "query"),
    #end
        @ApiImplicitParam(name = "limit", dataType = "int", value = "每页条数", required = true, paramType = "query"),
        @ApiImplicitParam(name = "page", dataType = "int", value = "页码", required = true, paramType = "query")
    })
    public R list(@RequestParam Map<String, Object> params){
        log.info("正在访问-----> list");
        for (Map.Entry vv:params.entrySet()) {
            log.info("传递参数名：{}，参数值：{}",vv,vv.getKey());
        }
        try{
            //判断数据是否存在
            MapUtils.containsAllKeyAndValNotEmpty(params,"page","limit");
        }catch(ParamException e){
            log.error(e.getMsg());
            return R.parameter(e.getMsg());

        }

        PageUtils page = ${classname}Service.queryPage(params);
        return R.ok().put("page", page);

    }

    @GetMapping("/info")
    @ApiOperation(value="根据主键查询数据", httpMethod="GET", produces=MediaType.APPLICATION_JSON_VALUE,response = ${className}Entity.class)
    @ApiImplicitParam(name = "${pk.attrname}", dataType = "${pk.attrType}", value = "主键id", required = true, paramType = "query")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public R info(@RequestParam Map<String, Object> params){
        log.debug("正在访问：info");
        try{
            //判断数据是否存在
            MapUtils.containsAllKeyAndValNotEmpty(params,"${pk.attrname}");
        }catch(ParamException e){
            log.error(e.getMsg());
            return R.parameter(e.getMsg());

        }
        Integer ${pk.attrname} = Integer.valueOf(params.get("${pk.attrname}").toString());
        ${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});
        return R.ok().put("${classname}", ${classname});
    }

    @PostMapping("/save")
    @ApiOperation(value="保存数据", httpMethod="POST", produces=MediaType.APPLICATION_JSON_VALUE)
    @ApiImplicitParams({
    #foreach ($column in $columns)
       @ApiImplicitParam(name = "$column.attrname", dataType = "$column.attrType", value = "$column.comments", required = false, paramType = "query"),
    #end
    })
    @RequiresPermissions("${moduleName}:${pathName}:save")
    public R save(@RequestBody ${className}Entity ${classname}){
        log.debug("正在访问：save");
        ${classname}Service.save(${classname});
        return R.ok();
    }

    @PostMapping("/update")
    @ApiOperation(value="修改数据", httpMethod="POST", produces=MediaType.APPLICATION_JSON_VALUE)
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public R update(@RequestBody ${className}Entity ${classname}){
        log.debug("正在访问：update");
        ${classname}Service.updateById(${classname});
        return R.ok();
    }

    @DeleteMapping("/delete")
    @ApiOperation(value="删除数据根据id", httpMethod="DELETE", produces=MediaType.APPLICATION_JSON_VALUE)
    @ApiImplicitParam(name = "${pk.attrname}s", dataType = "String", value = "主键id集合通过','分割", required = true, paramType = "query")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
        log.debug("正在访问：delete");
        ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
        return R.ok();
    }

}
